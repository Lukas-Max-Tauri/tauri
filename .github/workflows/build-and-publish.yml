name: Build and Publish macOS App

on:
  push:
    tags:
      - 'v*'  # Workflow wird bei Tag-Push mit v-Präfix ausgelöst (z.B. v1.0.0)

jobs:
  build-and-publish:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install dependencies
        run: npm ci

      - name: Install Apple Certificate
        env:
          APPLE_DEVELOPER_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          APPLE_DEVELOPER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          echo "$APPLE_DEVELOPER_CERTIFICATE_P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_DEVELOPER_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Clean up
          rm certificate.p12

      - name: Build Tauri App
        run: |
          # Konfiguriere die bundle.identifier in der tauri.conf.json
          node -e "const fs=require('fs');const config=JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json'));config.tauri.bundle.identifier='${{ secrets.APPLE_APP_BUNDLE_ID }}';fs.writeFileSync('src-tauri/tauri.conf.json',JSON.stringify(config,null,2))"
          
          # Baue die App
          npm run tauri build

      - name: Sign macOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Finde den Pfad zur .app-Datei
          APP_PATH=$(find src-tauri/target/release/bundle/macos -name "*.app" -type d)
          echo "App gefunden in: $APP_PATH"
          
          # App signieren
          codesign --force --options runtime --sign "Developer ID Application: $APPLE_TEAM_ID" --deep "$APP_PATH"
          
          # App in .pkg verpacken
          PKG_PATH="./app.pkg"
          productbuild --component "$APP_PATH" /Applications --sign "Developer ID Installer: $APPLE_TEAM_ID" "$PKG_PATH"
          
          echo "PKG erstellt: $PKG_PATH"

      - name: Notarize App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_APP_BUNDLE_ID: ${{ secrets.APPLE_APP_BUNDLE_ID }}
        run: |
          # App notarisieren
          xcrun notarytool submit app.pkg --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --wait
          
          # Notarisierung überprüfen
          xcrun stapler staple app.pkg

      - name: Hochladen zum App Store
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # App zum App Store Connect hochladen
          xcrun altool --upload-app --type macos --file app.pkg --username "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD"

      - name: Release erstellen
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app.pkg
            src-tauri/target/release/bundle/macos/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
